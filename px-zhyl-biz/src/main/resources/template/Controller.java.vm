
package ${package}.${moduleName}.controller;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.pig4cloud.pig.common.core.util.R;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}Service;
import com.px.basic.alone.core.base.BaseController;
import com.px.common.log.annotation.SysLog;
import com.px.basic.alone.security.util.SecurityUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/${moduleName}/${pathName}")
@Api(value = "${pathName}", tags = "${comments}管理")
public class ${className}Controller extends BaseController<${className},${className}Service> {

    private final  ${className}Service ${classname}Service;

    /**
     * 分页查询
     * @param page 分页对象
     * @param ${classname} ${comments}
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/page")
    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_get')")
    public R get${className}Page(Page<Integer> page, ${className} ${classname}) {
        return super.query(${classname}, page);
    }


    /**
     * 通过id查询${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/{${pk.lowerAttrName}}")
    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_get')")
    public R getById(@PathVariable("${pk.lowerAttrName}") ${pk.attrType} ${pk.lowerAttrName}) {
        return super.get(${pk.lowerAttrName});
    }

    /**
     * 新增${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @ApiOperation(value = "新增${comments}", notes = "新增${comments}")
    @PostMapping
    @SysLog("新增${comments}")
    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_add')")
    public R save(@Validated @RequestBody ${className} ${classname}) {
        return super.update(${classname}, SecurityUtils.getUser().getId());
    }

    /**
     * 修改${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @ApiOperation(value = "修改${comments}", notes = "修改${comments}")
    @PutMapping
    @SysLog("修改${comments}")
    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_edit')")
    public R updateById(@Validated @RequestBody ${className} ${classname}) {
        return super.update(${classname}, SecurityUtils.getUser().getId());
    }

    /**
     * 通过id删除${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */
    @ApiOperation(value = "通过id删除${comments}", notes = "通过id删除${comments}")
    @DeleteMapping("/{${pk.lowerAttrName}}")
    @SysLog("通过id删除${comments}")
    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_del')")
    public R removeById(@PathVariable ${pk.attrType} ${pk.lowerAttrName}) {
        ${className} ${classname}=super.service.queryById(${pk.lowerAttrName});
        if (${classname} ==null){
            return R.failed("ID错误");
        }
        return super.del(${classname}, SecurityUtils.getUser().getId());
    }

}
